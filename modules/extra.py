import time
import string
import random
#import gexf
import os

def timeit(method):
    def timed(*args, **kw):    	
		ts = time.time()
		result = method(*args, **kw)
		te = time.time()

		print '%r (%r, %r) %2.9f sec' % \
              (method.__name__, args, kw, te-ts)
		return result

    return timed

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
	return ''.join(random.choice(chars) for _ in range(size))

def to_gexf(graph, filename = "graph"):	
	gexf_instance = gexf.Gexf("Generated by Libgraph", filename)
	g = gexf_instance.addGraph("directed", "static", graph.name)

	if isinstance(graph, d.Bipartite):
		for id_top_node in graph.list_top_nodes:
			# METTRE DES COULEURS SUR LES NOEUDS => ROUGE
			g.addNode(id_top_node, "[node]")
			g.addNodeAttribute(id_top_node)
		for id_bot_node in graph.list_bot_nodes:
			# METTRE DES COULEURS SUR LES NOEUDS => ORANGE (BLEU)
			g.addNode(id_bot_node, "[node]")
			g.addNodeAttribute(id_bot_node)
	else:
		for id_node in graph.nodes:
			g.addNode(id_node, "[node]")
			g.addNodeAttribute(id_node)

	if isinstance(graph, d.Bipartite):
		for id_top_node in graph.list_top_nodes:
			for id_bot_neighbour in graph.nodes[id_top_node].list_neighbours:
				g.addEdge(id_top_node + "-" + id_bot_neighbour, id_top_node, id_bot_neighbour)
	else:
		for id_node in graph.nodes:
			for id_neighbour in graph.nodes[id_node].list_neighbours:
				g.addEdge(id_node + "-" + id_neighbour, id_node, id_neighbour)

	output_file = open(filename + ".gexf", 'w')
	gexf_instance.write(output_file)
	output_file.close()

def detect_community(G):
	list_coeff_degree = {}
	list_max_coeff_degree = {}
	list_min_coeff_degree = {}
	
	for id_node in G.nodes:
		list_coeff_degree[id_node] = []
		list_max_coeff_degree[id_node] = 0.0
		list_min_coeff_degree[id_node] = 1.0
		for id_neighbour in G.nodes[id_node].list_neighbours:
			calc = (1 / float(G.nodes[id_node].degree) + 1 / float(G.nodes[id_neighbour].degree)) * (1 / float(G.nodes[id_neighbour].degree))
			list_coeff_degree[id_node].append((id_neighbour, calc))

			if calc > list_max_coeff_degree[id_node]:
				list_max_coeff_degree[id_node] = calc
			if calc < list_min_coeff_degree[id_node]:
				list_min_coeff_degree[id_node] = calc

	print list_coeff_degree
	print list_max_coeff_degree
	print list_min_coeff_degree

	community = {}

	for id_node in G.nodes:
		community[id_node] = []
		for id_neighbour in G.nodes[id_node].list_neighbours:
			if list_max_coeff_degree[id_node] >= list_max_coeff_degree[id_neighbour] and list_max_coeff_degree[id_node] <= list_max_coeff_degree[id_neighbour]:
				community[id_node].append(id_neighbour)

	print community

def draw_graph(G, directory):
	import matplotlib	
	import networkx as nx
	import matplotlib.pyplot as plt
	

	H = nx.Graph()
	labels = {}

	if isinstance(G, d.Bipartite):
		x_coord = 1.0
		y_coord = 10.0

		for id_top_node in G.list_top_nodes:
			x_coord += 3.0
			H.add_node(id_top_node, posxy=(x_coord, y_coord))

			for id_neighbour in G.nodes[id_top_node].list_neighbours:
				H.add_edge(id_top_node, id_neighbour)

		x_coord = 1.0
		y_coord = 1.0

		for id_bot_node in G.list_bot_nodes:
			x_coord += 3.0
			H.add_node(id_bot_node, posxy=(x_coord, y_coord))

			for id_neighbour in G.nodes[id_bot_node].list_neighbours:
				H.add_edge(id_bot_node, id_neighbour)
		
		pos = nx.get_node_attributes(H, 'posxy')
		nx.draw_networkx_nodes(H, pos, G.list_top_nodes, node_size = 10, node_color = 'g')
		nx.draw_networkx_nodes(H, pos, G.list_bot_nodes, node_size = 10, node_color = 'r')
	else:
		for id_node in G.nodes:
			labels[id_node] = id_node
			for id_neighbour in G.nodes[id_node].list_neighbours:
				H.add_edge(id_node, id_neighbour)

		pos = nx.spring_layout(H, scale=200)
		nx.draw_networkx_labels(H, pos, labels, font_size=16)

	nx.draw_networkx_edges(H, pos, width=0.1, alpha = 0.5)	
	plt.savefig(directory + "/graph.png", dpi=1000)


def save_nodes(G, directory):

	if isinstance(G, b.Bipartite):
		f = open(directory + "/top_nodes", 'w')
		for id_node in G.list_top_nodes:
			f.write(str(id_node) + '\n')
		f.close()
		f = open(directory + "/bot_nodes", 'w')
		for id_node in G.list_bot_nodes:
			f.write(str(id_node) + '\n')
		f.close()
	else:
		f = open(directory + "/nodes", 'w')
		for id_node in G.list_bot_nodes:
			f.write(str(id_node) + '\n')
		f.close()

def num(s):
    try:
        return int(s)
    except ValueError:
        return float(s)
